// <auto-generated />
using System;
using Carts.Data.POCO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Carts.Migrations
{
    [DbContext(typeof(AirTableContext))]
    partial class AirTableContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Carts.Data.POCO.InvoiceTb", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid?>("ProductId");

                    b.Property<decimal>("TotalOrderCost");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceTb");
                });

            modelBuilder.Entity("Carts.Data.POCO.OrderItemTb", b =>
                {
                    b.Property<Guid>("OrderItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<Guid?>("OrderId");

                    b.Property<decimal?>("PriceSold");

                    b.Property<Guid?>("ProductId");

                    b.Property<int?>("Quantity");

                    b.HasKey("OrderItemId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItemTb");
                });

            modelBuilder.Entity("Carts.Data.POCO.OrderTb", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedById");

                    b.Property<Guid?>("CustomerId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateDeleted");

                    b.Property<string>("DeliveryAddress");

                    b.Property<decimal?>("DeliveryCost");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("OrderReference");

                    b.HasKey("OrderId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.ToTable("OrderTb");
                });

            modelBuilder.Entity("Carts.Data.POCO.ProductTb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("FeatureImage");

                    b.Property<string>("ProductCode");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("ProductTb");
                });

            modelBuilder.Entity("Carts.Data.POCO.RoleTb", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName");

                    b.HasKey("RoleId");

                    b.ToTable("RoleTb");
                });

            modelBuilder.Entity("Carts.Data.POCO.UsersTb", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsEnabled");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("Profileimage");

                    b.Property<Guid?>("RoleId");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersTb");
                });

            modelBuilder.Entity("Carts.Data.POCO.InvoiceTb", b =>
                {
                    b.HasOne("Carts.Data.POCO.UsersTb", "CreatedBy")
                        .WithMany("InvoiceTb")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Carts.Data.POCO.OrderTb", "Order")
                        .WithMany("InvoiceTb")
                        .HasForeignKey("OrderId");

                    b.HasOne("Carts.Data.POCO.ProductTb", "Product")
                        .WithMany("InvoiceTb")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Carts.Data.POCO.OrderItemTb", b =>
                {
                    b.HasOne("Carts.Data.POCO.UsersTb", "CreatedBy")
                        .WithMany("OrderItemTb")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Carts.Data.POCO.OrderTb", "Order")
                        .WithMany("OrderItemTb")
                        .HasForeignKey("OrderId");

                    b.HasOne("Carts.Data.POCO.ProductTb", "Product")
                        .WithMany("OrderItemTb")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Carts.Data.POCO.OrderTb", b =>
                {
                    b.HasOne("Carts.Data.POCO.UsersTb", "CreatedBy")
                        .WithMany("OrdersCreated")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Carts.Data.POCO.UsersTb", "Customer")
                        .WithMany("OrdersOwned")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Carts.Data.POCO.ProductTb", b =>
                {
                    b.HasOne("Carts.Data.POCO.UsersTb", "CreatedBy")
                        .WithMany("Products")
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("Carts.Data.POCO.UsersTb", b =>
                {
                    b.HasOne("Carts.Data.POCO.RoleTb", "Role")
                        .WithMany("UsersTb")
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
